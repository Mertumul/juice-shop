name: 🧃 Juice Shop - SBOM, Semgrep, Gitleaks & ZAP Scan

on:
  workflow_dispatch:

jobs:
  build-and-sbom:
    name: 🔧 Build Docker & Generate SBOM
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout source
      uses: actions/checkout@v3

    - name: 🐳 Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ Build Juice Shop Docker Image
      run: |
        docker build -t juice-shop-local .

    - name: 🧰 Install Syft
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

    - name: 📦 Generate SBOM with Syft
      run: |
        syft juice-shop-local -o spdx-json > sbom.json

    - name: ☁️ Upload SBOM as artifact
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.json

  sast-with-semgrep:
    name: 🛡️ Semgrep SAST Scan
    runs-on: ubuntu-latest

    permissions:
      security-events: write  # Required for SARIF report

    steps:
    - name: 📥 Checkout source
      uses: actions/checkout@v3

    - name: 🔍 Run Semgrep with Docker
      run: |
        docker run --rm \
          -v "${{ github.workspace }}:/src" \
          returntocorp/semgrep \
          semgrep scan --config auto \
          --sarif --output /src/semgrep-results.sarif

    - name: ☁️ Upload SARIF to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: semgrep-results.sarif

    - name: 📦 Upload Semgrep SARIF as artifact
      uses: actions/upload-artifact@v4
      with:
        name: semgrep-sarif
        path: semgrep-results.sarif

  gitleaks-scan:
    name: 🔍 Gitleaks Secret Scan
    runs-on: ubuntu-latest
    continue-on-error: true  # Proceed even if an error occurs

    steps:
    - name: 📥 Checkout source
      uses: actions/checkout@v3

    - name: 🚨 Run Gitleaks using Docker image
      run: |
        docker run --rm \
          -v "${{ github.workspace }}:/repo" \
          ghcr.io/gitleaks/gitleaks:v8.24.3 \
          detect --redact --exit-code=2 --report-format=sarif --report-path=/repo/results.sarif --log-level=debug || true  # Continue even if an error occurs

    - name: 💾 Check if SARIF file exists
      run: |
        echo "🔍 Checking if SARIF file exists..."
        if [ ! -f /repo/results.sarif ]; then
          echo "🔴 Gitleaks SARIF report not found!"
          exit 1
        fi
        echo "✅ Gitleaks SARIF report found."

    - name: ☁️ Upload SARIF to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: /repo/results.sarif

    - name: 📦 Upload Gitleaks SARIF as artifact
      uses: actions/upload-artifact@v4
      with:
        name: gitleaks-sarif
        path: /repo/results.sarif

  zap-scan:
    name: 🔍 ZAP Security Scan
    runs-on: ubuntu-latest
    continue-on-error: true  # Proceed even if an error occurs

    steps:
    - name: 📥 Checkout source
      uses: actions/checkout@v3

    - name: 🐳 Pull ZAP Stable Docker Image from ICTU Repository
      run: |
        docker pull ictu/zaproxy:stable

    - name: 🚨 Run ZAP security scan on example.com
      run: |
        docker run --rm \
          -v "${{ github.workspace }}:/zap/wrk:rw" \
          ictu/zaproxy:stable \
          zap-baseline.py -t http://example.com -g gen.conf -x /zap/wrk/zap-report.xml

    - name: 📦 Upload ZAP XML Report as artifact
      uses: actions/upload-artifact@v4
      with:
        name: zap-report
        path: /zap/wrk/zap-report.xml

  dummy-deploy:
    name: 🚀 Dummy Deploy
    runs-on: ubuntu-latest
    continue-on-error: true  # Proceed even if an error occurs

    steps:
    - name: 📥 Checkout source
      uses: actions/checkout@v3

    - name: 🏗️ Dummy deploy
      run: |
        echo "Deploying the Juice Shop Application..."  # Replace with your deploy command
        echo "🟢 Dummy Deploy completed!"
